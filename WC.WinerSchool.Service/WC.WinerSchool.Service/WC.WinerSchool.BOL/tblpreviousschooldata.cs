//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblpreviousschooldata: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> StudentId
        {
            get { return _studentId; }
            set
            {
                if (_studentId != value)
                {
                    _studentId = value;
                    OnPropertyChanged("StudentId");
                }
            }
        }
        private Nullable<int> _studentId;
    
        [DataMember]
        public string NameofSchool
        {
            get { return _nameofSchool; }
            set
            {
                if (_nameofSchool != value)
                {
                    _nameofSchool = value;
                    OnPropertyChanged("NameofSchool");
                }
            }
        }
        private string _nameofSchool;
    
        [DataMember]
        public string ConcessionScholarshipDetails
        {
            get { return _concessionScholarshipDetails; }
            set
            {
                if (_concessionScholarshipDetails != value)
                {
                    _concessionScholarshipDetails = value;
                    OnPropertyChanged("ConcessionScholarshipDetails");
                }
            }
        }
        private string _concessionScholarshipDetails;
    
        [DataMember]
        public string StandarsCoveredDetails
        {
            get { return _standarsCoveredDetails; }
            set
            {
                if (_standarsCoveredDetails != value)
                {
                    _standarsCoveredDetails = value;
                    OnPropertyChanged("StandarsCoveredDetails");
                }
            }
        }
        private string _standarsCoveredDetails;
    
        [DataMember]
        public Nullable<System.DateTime> DateofLeaving
        {
            get { return _dateofLeaving; }
            set
            {
                if (_dateofLeaving != value)
                {
                    _dateofLeaving = value;
                    OnPropertyChanged("DateofLeaving");
                }
            }
        }
        private Nullable<System.DateTime> _dateofLeaving;
    
        [DataMember]
        public string Reason
        {
            get { return _reason; }
            set
            {
                if (_reason != value)
                {
                    _reason = value;
                    OnPropertyChanged("Reason");
                }
            }
        }
        private string _reason;
    
        [DataMember]
        public string TCNumber
        {
            get { return _tCNumber; }
            set
            {
                if (_tCNumber != value)
                {
                    _tCNumber = value;
                    OnPropertyChanged("TCNumber");
                }
            }
        }
        private string _tCNumber;
    
        [DataMember]
        public string Innoculated
        {
            get { return _innoculated; }
            set
            {
                if (_innoculated != value)
                {
                    _innoculated = value;
                    OnPropertyChanged("Innoculated");
                }
            }
        }
        private string _innoculated;
    
        [DataMember]
        public string C1stLanguage
        {
            get { return _c1stLanguage; }
            set
            {
                if (_c1stLanguage != value)
                {
                    _c1stLanguage = value;
                    OnPropertyChanged("C1stLanguage");
                }
            }
        }
        private string _c1stLanguage;
    
        [DataMember]
        public string LanguagesStudied
        {
            get { return _languagesStudied; }
            set
            {
                if (_languagesStudied != value)
                {
                    _languagesStudied = value;
                    OnPropertyChanged("LanguagesStudied");
                }
            }
        }
        private string _languagesStudied;
    
        [DataMember]
        public string MediumOfInstruction
        {
            get { return _mediumOfInstruction; }
            set
            {
                if (_mediumOfInstruction != value)
                {
                    _mediumOfInstruction = value;
                    OnPropertyChanged("MediumOfInstruction");
                }
            }
        }
        private string _mediumOfInstruction;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
