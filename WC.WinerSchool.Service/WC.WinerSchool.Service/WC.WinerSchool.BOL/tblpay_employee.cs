//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblpay_employee: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Surname
        {
            get { return _surname; }
            set
            {
                if (_surname != value)
                {
                    _surname = value;
                    OnPropertyChanged("Surname");
                }
            }
        }
        private string _surname;
    
        [DataMember]
        public string EmpId
        {
            get { return _empId; }
            set
            {
                if (_empId != value)
                {
                    _empId = value;
                    OnPropertyChanged("EmpId");
                }
            }
        }
        private string _empId;
    
        [DataMember]
        public string PresentAddress
        {
            get { return _presentAddress; }
            set
            {
                if (_presentAddress != value)
                {
                    _presentAddress = value;
                    OnPropertyChanged("PresentAddress");
                }
            }
        }
        private string _presentAddress;
    
        [DataMember]
        public string Designation
        {
            get { return _designation; }
            set
            {
                if (_designation != value)
                {
                    _designation = value;
                    OnPropertyChanged("Designation");
                }
            }
        }
        private string _designation;
    
        [DataMember]
        public Nullable<double> BasicPay
        {
            get { return _basicPay; }
            set
            {
                if (_basicPay != value)
                {
                    _basicPay = value;
                    OnPropertyChanged("BasicPay");
                }
            }
        }
        private Nullable<double> _basicPay;
    
        [DataMember]
        public Nullable<double> Gross
        {
            get { return _gross; }
            set
            {
                if (_gross != value)
                {
                    _gross = value;
                    OnPropertyChanged("Gross");
                }
            }
        }
        private Nullable<double> _gross;
    
        [DataMember]
        public Nullable<double> Deduction
        {
            get { return _deduction; }
            set
            {
                if (_deduction != value)
                {
                    _deduction = value;
                    OnPropertyChanged("Deduction");
                }
            }
        }
        private Nullable<double> _deduction;
    
        [DataMember]
        public Nullable<double> NetAmt
        {
            get { return _netAmt; }
            set
            {
                if (_netAmt != value)
                {
                    _netAmt = value;
                    OnPropertyChanged("NetAmt");
                }
            }
        }
        private Nullable<double> _netAmt;
    
        [DataMember]
        public string PAN
        {
            get { return _pAN; }
            set
            {
                if (_pAN != value)
                {
                    _pAN = value;
                    OnPropertyChanged("PAN");
                }
            }
        }
        private string _pAN;
    
        [DataMember]
        public string BankName
        {
            get { return _bankName; }
            set
            {
                if (_bankName != value)
                {
                    _bankName = value;
                    OnPropertyChanged("BankName");
                }
            }
        }
        private string _bankName;
    
        [DataMember]
        public Nullable<long> AccNo
        {
            get { return _accNo; }
            set
            {
                if (_accNo != value)
                {
                    _accNo = value;
                    OnPropertyChanged("AccNo");
                }
            }
        }
        private Nullable<long> _accNo;
    
        [DataMember]
        public Nullable<int> PayrollType
        {
            get { return _payrollType; }
            set
            {
                if (_payrollType != value)
                {
                    _payrollType = value;
                    OnPropertyChanged("PayrollType");
                }
            }
        }
        private Nullable<int> _payrollType;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public sbyte Approval
        {
            get { return _approval; }
            set
            {
                if (_approval != value)
                {
                    _approval = value;
                    OnPropertyChanged("Approval");
                }
            }
        }
        private sbyte _approval;
    
        [DataMember]
        public Nullable<sbyte> Reject
        {
            get { return _reject; }
            set
            {
                if (_reject != value)
                {
                    _reject = value;
                    OnPropertyChanged("Reject");
                }
            }
        }
        private Nullable<sbyte> _reject;
    
        [DataMember]
        public Nullable<double> Advance
        {
            get { return _advance; }
            set
            {
                if (_advance != value)
                {
                    _advance = value;
                    OnPropertyChanged("Advance");
                }
            }
        }
        private Nullable<double> _advance;
    
        [DataMember]
        public Nullable<double> Balance
        {
            get { return _balance; }
            set
            {
                if (_balance != value)
                {
                    _balance = value;
                    OnPropertyChanged("Balance");
                }
            }
        }
        private Nullable<double> _balance;
    
        [DataMember]
        public Nullable<double> DeductionPercent
        {
            get { return _deductionPercent; }
            set
            {
                if (_deductionPercent != value)
                {
                    _deductionPercent = value;
                    OnPropertyChanged("DeductionPercent");
                }
            }
        }
        private Nullable<double> _deductionPercent;
    
        [DataMember]
        public Nullable<sbyte> Configured
        {
            get { return _configured; }
            set
            {
                if (_configured != value)
                {
                    _configured = value;
                    OnPropertyChanged("Configured");
                }
            }
        }
        private Nullable<sbyte> _configured;
    
        [DataMember]
        public Nullable<int> StaffId
        {
            get { return _staffId; }
            set
            {
                if (_staffId != value)
                {
                    _staffId = value;
                    OnPropertyChanged("StaffId");
                }
            }
        }
        private Nullable<int> _staffId;
    
        [DataMember]
        public Nullable<int> Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private Nullable<int> _status;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
