//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblstudentdetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int StudentId
        {
            get { return _studentId; }
            set
            {
                if (_studentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'StudentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _studentId = value;
                    OnPropertyChanged("StudentId");
                }
            }
        }
        private int _studentId;
    
        [DataMember]
        public string Field1
        {
            get { return _field1; }
            set
            {
                if (_field1 != value)
                {
                    _field1 = value;
                    OnPropertyChanged("Field1");
                }
            }
        }
        private string _field1;
    
        [DataMember]
        public string Field2
        {
            get { return _field2; }
            set
            {
                if (_field2 != value)
                {
                    _field2 = value;
                    OnPropertyChanged("Field2");
                }
            }
        }
        private string _field2;
    
        [DataMember]
        public string Field3
        {
            get { return _field3; }
            set
            {
                if (_field3 != value)
                {
                    _field3 = value;
                    OnPropertyChanged("Field3");
                }
            }
        }
        private string _field3;
    
        [DataMember]
        public string Field4
        {
            get { return _field4; }
            set
            {
                if (_field4 != value)
                {
                    _field4 = value;
                    OnPropertyChanged("Field4");
                }
            }
        }
        private string _field4;
    
        [DataMember]
        public string Field5
        {
            get { return _field5; }
            set
            {
                if (_field5 != value)
                {
                    _field5 = value;
                    OnPropertyChanged("Field5");
                }
            }
        }
        private string _field5;
    
        [DataMember]
        public string Field6
        {
            get { return _field6; }
            set
            {
                if (_field6 != value)
                {
                    _field6 = value;
                    OnPropertyChanged("Field6");
                }
            }
        }
        private string _field6;
    
        [DataMember]
        public string Field7
        {
            get { return _field7; }
            set
            {
                if (_field7 != value)
                {
                    _field7 = value;
                    OnPropertyChanged("Field7");
                }
            }
        }
        private string _field7;
    
        [DataMember]
        public string Field8
        {
            get { return _field8; }
            set
            {
                if (_field8 != value)
                {
                    _field8 = value;
                    OnPropertyChanged("Field8");
                }
            }
        }
        private string _field8;
    
        [DataMember]
        public string Field9
        {
            get { return _field9; }
            set
            {
                if (_field9 != value)
                {
                    _field9 = value;
                    OnPropertyChanged("Field9");
                }
            }
        }
        private string _field9;
    
        [DataMember]
        public string Field10
        {
            get { return _field10; }
            set
            {
                if (_field10 != value)
                {
                    _field10 = value;
                    OnPropertyChanged("Field10");
                }
            }
        }
        private string _field10;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
