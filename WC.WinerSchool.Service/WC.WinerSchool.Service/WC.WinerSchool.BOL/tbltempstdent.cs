//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tbltempstdent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string TempId
        {
            get { return _tempId; }
            set
            {
                if (_tempId != value)
                {
                    _tempId = value;
                    OnPropertyChanged("TempId");
                }
            }
        }
        private string _tempId;
    
        [DataMember]
        public string Fathername
        {
            get { return _fathername; }
            set
            {
                if (_fathername != value)
                {
                    _fathername = value;
                    OnPropertyChanged("Fathername");
                }
            }
        }
        private string _fathername;
    
        [DataMember]
        public string Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    OnPropertyChanged("Gender");
                }
            }
        }
        private string _gender;
    
        [DataMember]
        public Nullable<System.DateTime> DOB
        {
            get { return _dOB; }
            set
            {
                if (_dOB != value)
                {
                    _dOB = value;
                    OnPropertyChanged("DOB");
                }
            }
        }
        private Nullable<System.DateTime> _dOB;
    
        [DataMember]
        public Nullable<short> Standard
        {
            get { return _standard; }
            set
            {
                if (_standard != value)
                {
                    _standard = value;
                    OnPropertyChanged("Standard");
                }
            }
        }
        private Nullable<short> _standard;
    
        [DataMember]
        public Nullable<short> Class
        {
            get { return _class; }
            set
            {
                if (_class != value)
                {
                    _class = value;
                    OnPropertyChanged("Class");
                }
            }
        }
        private Nullable<short> _class;
    
        [DataMember]
        public Nullable<short> JoiningBatch
        {
            get { return _joiningBatch; }
            set
            {
                if (_joiningBatch != value)
                {
                    _joiningBatch = value;
                    OnPropertyChanged("JoiningBatch");
                }
            }
        }
        private Nullable<short> _joiningBatch;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    _phoneNumber = value;
                    OnPropertyChanged("PhoneNumber");
                }
            }
        }
        private string _phoneNumber;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _createdDate;
    
        [DataMember]
        public Nullable<sbyte> Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private Nullable<sbyte> _status;
    
        [DataMember]
        public Nullable<int> LoginId
        {
            get { return _loginId; }
            set
            {
                if (_loginId != value)
                {
                    _loginId = value;
                    OnPropertyChanged("LoginId");
                }
            }
        }
        private Nullable<int> _loginId;
    
        [DataMember]
        public Nullable<int> AdmissionStatusId
        {
            get { return _admissionStatusId; }
            set
            {
                if (_admissionStatusId != value)
                {
                    _admissionStatusId = value;
                    OnPropertyChanged("AdmissionStatusId");
                }
            }
        }
        private Nullable<int> _admissionStatusId;
    
        [DataMember]
        public Nullable<int> CommentThreadId
        {
            get { return _commentThreadId; }
            set
            {
                if (_commentThreadId != value)
                {
                    _commentThreadId = value;
                    OnPropertyChanged("CommentThreadId");
                }
            }
        }
        private Nullable<int> _commentThreadId;
    
        [DataMember]
        public int Rank
        {
            get { return _rank; }
            set
            {
                if (_rank != value)
                {
                    _rank = value;
                    OnPropertyChanged("Rank");
                }
            }
        }
        private int _rank;
    
        [DataMember]
        public string CreatedUserName
        {
            get { return _createdUserName; }
            set
            {
                if (_createdUserName != value)
                {
                    _createdUserName = value;
                    OnPropertyChanged("CreatedUserName");
                }
            }
        }
        private string _createdUserName;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
