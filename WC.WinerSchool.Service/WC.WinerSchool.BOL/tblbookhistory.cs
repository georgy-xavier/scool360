//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblbookhistory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string BookId
        {
            get { return _bookId; }
            set
            {
                if (_bookId != value)
                {
                    _bookId = value;
                    OnPropertyChanged("BookId");
                }
            }
        }
        private string _bookId;
    
        [DataMember]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private string _userId;
    
        [DataMember]
        public string UserTypeId
        {
            get { return _userTypeId; }
            set
            {
                if (_userTypeId != value)
                {
                    _userTypeId = value;
                    OnPropertyChanged("UserTypeId");
                }
            }
        }
        private string _userTypeId;
    
        [DataMember]
        public Nullable<double> FineAmount
        {
            get { return _fineAmount; }
            set
            {
                if (_fineAmount != value)
                {
                    _fineAmount = value;
                    OnPropertyChanged("FineAmount");
                }
            }
        }
        private Nullable<double> _fineAmount;
    
        [DataMember]
        public string TakenDate
        {
            get { return _takenDate; }
            set
            {
                if (_takenDate != value)
                {
                    _takenDate = value;
                    OnPropertyChanged("TakenDate");
                }
            }
        }
        private string _takenDate;
    
        [DataMember]
        public Nullable<System.DateTime> ReturnedDate
        {
            get { return _returnedDate; }
            set
            {
                if (_returnedDate != value)
                {
                    _returnedDate = value;
                    OnPropertyChanged("ReturnedDate");
                }
            }
        }
        private Nullable<System.DateTime> _returnedDate;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<short> CurrentBatchId
        {
            get { return _currentBatchId; }
            set
            {
                if (_currentBatchId != value)
                {
                    _currentBatchId = value;
                    OnPropertyChanged("CurrentBatchId");
                }
            }
        }
        private Nullable<short> _currentBatchId;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
