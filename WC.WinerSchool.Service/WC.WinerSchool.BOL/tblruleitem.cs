//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblruleitem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string tblname
        {
            get { return _tblname; }
            set
            {
                if (_tblname != value)
                {
                    _tblname = value;
                    OnPropertyChanged("tblname");
                }
            }
        }
        private string _tblname;
    
        [DataMember]
        public string Colname
        {
            get { return _colname; }
            set
            {
                if (_colname != value)
                {
                    _colname = value;
                    OnPropertyChanged("Colname");
                }
            }
        }
        private string _colname;
    
        [DataMember]
        public string fieldType
        {
            get { return _fieldType; }
            set
            {
                if (_fieldType != value)
                {
                    _fieldType = value;
                    OnPropertyChanged("fieldType");
                }
            }
        }
        private string _fieldType;
    
        [DataMember]
        public Nullable<sbyte> havemaster
        {
            get { return _havemaster; }
            set
            {
                if (_havemaster != value)
                {
                    _havemaster = value;
                    OnPropertyChanged("havemaster");
                }
            }
        }
        private Nullable<sbyte> _havemaster;
    
        [DataMember]
        public string mastertblname
        {
            get { return _mastertblname; }
            set
            {
                if (_mastertblname != value)
                {
                    _mastertblname = value;
                    OnPropertyChanged("mastertblname");
                }
            }
        }
        private string _mastertblname;
    
        [DataMember]
        public string MasterDiplyName
        {
            get { return _masterDiplyName; }
            set
            {
                if (_masterDiplyName != value)
                {
                    _masterDiplyName = value;
                    OnPropertyChanged("MasterDiplyName");
                }
            }
        }
        private string _masterDiplyName;
    
        [DataMember]
        public string valuecol
        {
            get { return _valuecol; }
            set
            {
                if (_valuecol != value)
                {
                    _valuecol = value;
                    OnPropertyChanged("valuecol");
                }
            }
        }
        private string _valuecol;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
