//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tblfeebill: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string StudentID
        {
            get { return _studentID; }
            set
            {
                if (_studentID != value)
                {
                    _studentID = value;
                    OnPropertyChanged("StudentID");
                }
            }
        }
        private string _studentID;
    
        [DataMember]
        public Nullable<double> TotalAmount
        {
            get { return _totalAmount; }
            set
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value;
                    OnPropertyChanged("TotalAmount");
                }
            }
        }
        private Nullable<double> _totalAmount;
    
        [DataMember]
        public Nullable<System.DateTime> Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        private Nullable<System.DateTime> _date;
    
        [DataMember]
        public string PaymentMode
        {
            get { return _paymentMode; }
            set
            {
                if (_paymentMode != value)
                {
                    _paymentMode = value;
                    OnPropertyChanged("PaymentMode");
                }
            }
        }
        private string _paymentMode;
    
        [DataMember]
        public string PaymentModeId
        {
            get { return _paymentModeId; }
            set
            {
                if (_paymentModeId != value)
                {
                    _paymentModeId = value;
                    OnPropertyChanged("PaymentModeId");
                }
            }
        }
        private string _paymentModeId;
    
        [DataMember]
        public string BankName
        {
            get { return _bankName; }
            set
            {
                if (_bankName != value)
                {
                    _bankName = value;
                    OnPropertyChanged("BankName");
                }
            }
        }
        private string _bankName;
    
        [DataMember]
        public string BillNo
        {
            get { return _billNo; }
            set
            {
                if (_billNo != value)
                {
                    _billNo = value;
                    OnPropertyChanged("BillNo");
                }
            }
        }
        private string _billNo;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedDateTime
        {
            get { return _createdDateTime; }
            set
            {
                if (_createdDateTime != value)
                {
                    _createdDateTime = value;
                    OnPropertyChanged("CreatedDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createdDateTime;
    
        [DataMember]
        public Nullable<sbyte> Canceled
        {
            get { return _canceled; }
            set
            {
                if (_canceled != value)
                {
                    _canceled = value;
                    OnPropertyChanged("Canceled");
                }
            }
        }
        private Nullable<sbyte> _canceled;
    
        [DataMember]
        public Nullable<int> Counter
        {
            get { return _counter; }
            set
            {
                if (_counter != value)
                {
                    _counter = value;
                    OnPropertyChanged("Counter");
                }
            }
        }
        private Nullable<int> _counter;
    
        [DataMember]
        public Nullable<int> AccYear
        {
            get { return _accYear; }
            set
            {
                if (_accYear != value)
                {
                    _accYear = value;
                    OnPropertyChanged("AccYear");
                }
            }
        }
        private Nullable<int> _accYear;
    
        [DataMember]
        public Nullable<int> ClassID
        {
            get { return _classID; }
            set
            {
                if (_classID != value)
                {
                    _classID = value;
                    OnPropertyChanged("ClassID");
                }
            }
        }
        private Nullable<int> _classID;
    
        [DataMember]
        public string StudentName
        {
            get { return _studentName; }
            set
            {
                if (_studentName != value)
                {
                    _studentName = value;
                    OnPropertyChanged("StudentName");
                }
            }
        }
        private string _studentName;
    
        [DataMember]
        public Nullable<sbyte> RegularFee
        {
            get { return _regularFee; }
            set
            {
                if (_regularFee != value)
                {
                    _regularFee = value;
                    OnPropertyChanged("RegularFee");
                }
            }
        }
        private Nullable<sbyte> _regularFee;
    
        [DataMember]
        public string TempId
        {
            get { return _tempId; }
            set
            {
                if (_tempId != value)
                {
                    _tempId = value;
                    OnPropertyChanged("TempId");
                }
            }
        }
        private string _tempId;
    
        [DataMember]
        public string OtherReference
        {
            get { return _otherReference; }
            set
            {
                if (_otherReference != value)
                {
                    _otherReference = value;
                    OnPropertyChanged("OtherReference");
                }
            }
        }
        private string _otherReference;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
