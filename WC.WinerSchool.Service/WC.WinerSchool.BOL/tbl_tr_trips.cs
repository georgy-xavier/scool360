//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WC.WinerSchool.BOL
{
    [DataContract(IsReference = true)]
    public partial class tbl_tr_trips: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string TripName
        {
            get { return _tripName; }
            set
            {
                if (_tripName != value)
                {
                    _tripName = value;
                    OnPropertyChanged("TripName");
                }
            }
        }
        private string _tripName;
    
        [DataMember]
        public Nullable<int> RouteId
        {
            get { return _routeId; }
            set
            {
                if (_routeId != value)
                {
                    _routeId = value;
                    OnPropertyChanged("RouteId");
                }
            }
        }
        private Nullable<int> _routeId;
    
        [DataMember]
        public Nullable<sbyte> RouteTypeId
        {
            get { return _routeTypeId; }
            set
            {
                if (_routeTypeId != value)
                {
                    _routeTypeId = value;
                    OnPropertyChanged("RouteTypeId");
                }
            }
        }
        private Nullable<sbyte> _routeTypeId;
    
        [DataMember]
        public Nullable<System.TimeSpan> StartTime
        {
            get { return _startTime; }
            set
            {
                if (_startTime != value)
                {
                    _startTime = value;
                    OnPropertyChanged("StartTime");
                }
            }
        }
        private Nullable<System.TimeSpan> _startTime;
    
        [DataMember]
        public Nullable<System.TimeSpan> EndTime
        {
            get { return _endTime; }
            set
            {
                if (_endTime != value)
                {
                    _endTime = value;
                    OnPropertyChanged("EndTime");
                }
            }
        }
        private Nullable<System.TimeSpan> _endTime;
    
        [DataMember]
        public double Distance
        {
            get { return _distance; }
            set
            {
                if (_distance != value)
                {
                    _distance = value;
                    OnPropertyChanged("Distance");
                }
            }
        }
        private double _distance;
    
        [DataMember]
        public Nullable<sbyte> IsOneSideTrip
        {
            get { return _isOneSideTrip; }
            set
            {
                if (_isOneSideTrip != value)
                {
                    _isOneSideTrip = value;
                    OnPropertyChanged("IsOneSideTrip");
                }
            }
        }
        private Nullable<sbyte> _isOneSideTrip;
    
        [DataMember]
        public Nullable<double> ExtraDistance
        {
            get { return _extraDistance; }
            set
            {
                if (_extraDistance != value)
                {
                    _extraDistance = value;
                    OnPropertyChanged("ExtraDistance");
                }
            }
        }
        private Nullable<double> _extraDistance;
    
        [DataMember]
        public Nullable<short> VehicleId
        {
            get { return _vehicleId; }
            set
            {
                if (_vehicleId != value)
                {
                    _vehicleId = value;
                    OnPropertyChanged("VehicleId");
                }
            }
        }
        private Nullable<short> _vehicleId;
    
        [DataMember]
        public Nullable<short> capacity
        {
            get { return _capacity; }
            set
            {
                if (_capacity != value)
                {
                    _capacity = value;
                    OnPropertyChanged("capacity");
                }
            }
        }
        private Nullable<short> _capacity;
    
        [DataMember]
        public string ContactNo
        {
            get { return _contactNo; }
            set
            {
                if (_contactNo != value)
                {
                    _contactNo = value;
                    OnPropertyChanged("ContactNo");
                }
            }
        }
        private string _contactNo;
    
        [DataMember]
        public Nullable<short> Occupied
        {
            get { return _occupied; }
            set
            {
                if (_occupied != value)
                {
                    _occupied = value;
                    OnPropertyChanged("Occupied");
                }
            }
        }
        private Nullable<short> _occupied;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
